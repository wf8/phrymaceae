
# script to estimate chronogram of Phrymaceae using discretized UCLN model
# and secondary root calibration with separate GTR+G for each of 6 gene partitions

base_dir = ""
rep = 1
n_iterations = 4000
sample_freq = 5

########## Read in data


filenames = v("ETS",
              "ITS",
              "rbcL",
              "rpl16",
              "rps16",
              "trnL-trnF")

n_partitions = filenames.size()

for (i in 1:n_partitions) {
    data[i] = readDiscreteCharacterData(base_dir + "data/" + filenames[i] + ".fasta")
    n_sites[i] <- data[i].nchar()
}

data[2].addMissingTaxa(data[1].taxa())

# get variables from alignments
n_species = data[1].ntaxa()
taxa = data[1].taxa()
n_branches = 2 * n_species - 2

# set up an index for our MCMC moves
mvi = 1



########## substition models


for (i in 1:n_partitions) {
    
    # specify the GTR+GAMMA substitution model for each partition 
    er_prior[i] <- v(1,1,1,1,1,1)
    er[i] ~ dnDirichlet(er_prior[i])
    moves[mvi++] = mvSimplexElementScale(er[i], alpha=1, weight=5)

    sf_prior[i] <- v(1,1,1,1)
    sf[i] ~ dnDirichlet(sf_prior[i])
    moves[mvi++] = mvSimplexElementScale(sf[i], alpha=1, weight=5)

    # create a deterministic variable for the rate matrix
    Q[i] := fnGTR(er[i], sf[i])

    # add among site rate variation
    alpha_prior[i] <- 1.0
    alpha[i] ~ dnExponential( alpha_prior[i] )
    gamma_rates[i] := fnDiscretizeGamma( alpha[i], alpha[i], 4, false )
    moves[mvi++] = mvScale(alpha[i], lambda=1, weight=5)

}




###### root age

#  Runquist et al 2016 paper estimated 28.6 - 49.8 Ma
root_time ~ dnNormal(mean=39.2, sd=5.0)
root_time.setValue(39.2)

# add moves for root time
moves[mvi++] = mvSlide(root_time, delta=1, weight=5)


####### tree model

# set up the parameters for the constant rate birth-death process

diversification_mean <- ln( ln(n_species/2.0) / root_time )
diversification_sd <- 0.587405*2

speciation ~ dnLognormal(mean=diversification_mean, sd=diversification_sd)
moves[mvi++] = mvScale(speciation, lambda=1.0, weight=3.0)

extinction ~ dnLognormal(mean=diversification_mean, sd=diversification_sd)
moves[mvi++] = mvScale(extinction, lambda=1.0, weight=3.0)


# the probability of sampling species at the present:
rho_s <- n_species / 188

# the time tree is a stochastic node modeled by the constant rate birth-death process 
timetree ~ dnBDP(lambda=speciation, mu=extinction, rho=rho_s, rootAge=abs(root_time), taxa=taxa)

# add moves on the tree node times
moves[mvi++] = mvNodeTimeSlideUniform(timetree, weight=20)
moves[mvi++] = mvNodeTimeScale(timetree, lambda=1, weight=20)
moves[mvi++] = mvSubtreeScale(timetree, weight=20)

# and moves for the tree topology
moves[mvi++] = mvNNI(timetree, weight=40)
moves[mvi++] = mvNarrow(timetree, weight=40)
moves[mvi++] = mvFNPR(timetree, weight=40)
moves[mvi++] = mvGPR(timetree, weight=40)




####### UCLN model on branch rates

ucln_log_mean <- 0.0
ucln_sigma <- 0.25

NUM_RATE_CATEGORIES <- 10
rate_categories := fnDiscretizeDistribution(dnLnorm(ucln_log_mean, ucln_sigma), NUM_RATE_CATEGORIES)
rate_probs <- simplex(rep(1, NUM_RATE_CATEGORIES)) 

# pull rates for each branch from lognormal
for (j in 1:n_branches) {

    branch_rates[j] ~ dnMixture(rate_categories, rate_probs)
    moves[mvi++] = mvMixtureAllocation(branch_rates[j], delta=2, weight=2)

}

mean_rt := mean(branch_rates)

up_down_scale_tree = mvUpDownScale(lambda=0.1, weight=100)
up_down_scale_tree.addVariable( timetree, TRUE )
up_down_scale_tree.addVariable( root_time, TRUE )

# base rates for each partition
for (i in 1:n_partitions) {

    base_rate[i] ~ dnExponential(10.0)
    base_rate[i].setValue(1.0)
    moves[mvi++] = mvSlide(base_rate[i], delta=0.1, weight=20)
    up_down_scale_tree.addVariable( base_rate[i], FALSE )

    # the branch-rates used in the phylogenetic CTMC are a function of the UCLN branch rates and the base rate for this partition
    branch_subrates[i] := branch_rates * base_rate[i]
    

    ### the full phylogenetic CTMC
    seq[i] ~ dnPhyloCTMC(tree=timetree, Q=Q[i], branchRates=branch_subrates[i], nSites=n_sites[i], siteRates=gamma_rates[i], type="DNA")

    ### attach the observed sequence data
    seq[i].clamp(data[i])

}
moves[mvi++] = up_down_scale_tree


### finish model
mymodel = model(timetree)

### set up the monitors that will output parameter values to file and screen
monitors[1] = mnScreen(printgen=1, root_time)
monitors[2] = mnFile(filename=base_dir + "output/" + rep + ".trees", printgen=sample_freq, timetree)
monitors[3] = mnModel(filename=base_dir + "output/" + rep + ".log", printgen=sample_freq)

### workspace mcmc ###
mymcmc = mcmc(mymodel, monitors, moves)

### run the MCMC ###
mymcmc.run(generations=n_iterations)

q()

